/**
 * Assists with displaying 'loading' indicators.
 * - Waits a 'delay' period before showing indicators. If stop() is called before delay
 *   period is up, the loading indicator will not be shown.
 *
 *   EG: If it takes something 100ms to load and the delay period is 200ms, no loading indicator will be shown.
 *
 * - Ensures that the loading indicator is displayed for a minimum amount of time (if
 *   it is displayed at all) before being removed.
 *
 *   EG: delay = 200ms, minimum display time = 800ms
 *   Time | Event
 *   =====|=======================
 *   0    | Begin loading    (call start())
 *   200  | Show loading indicator 
 *   210  | Finished loading (call stop())
 *   1000 | Remove loading indicator, show loading result.
 *
 * - Construct a new instance per loading indicator that needs to be displayed. It can be
 *   reused whenever that indicator needs to be shown again.
 */
 class LoadingIndicatorTimer {
    constructor({delayMs, minDisplayMs, indicatorFn}) {
        this.delayMs = delayMs || 300;
        this.minDisplayMs = minDisplayMs || 600;
        this.indicatorFn = indicatorFn;
    }
    
    start() {
        this.indicatorMinimumDisplayed = false;
        this.indicatorDisplayed = false;
        const displayIndicator = () => {
            this.indicatorDisplayed = true;
            setTimeout(() => {
               this.indicatorMinimumDisplayed = true;
            }, this.minDisplayMs);
            this.indicatorFn();
        };
        this.delayTimer = setTimeout(displayIndicator, this.delayMs);
    }
    
    // renderChangeFn - function called to update the application with the results of the
    //      loading operation
    stop(renderChangeFn) {
        if (!this.indicatorDisplayed || this.indicatorMinimumDisplayed) {
            // Either the indicator was not displayed or it was displayed for the minimum amount of time.
            clearTimeout(this.delayTimer);
            renderChangeFn();
        }
        else {
            // Try again in 100ms
            setTimeout(() => this.stop(renderChangeFn), 100);
        }
    }
}